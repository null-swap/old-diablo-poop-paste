package cc.diablo.module.impl.exploit;

import cc.diablo.Main;
import cc.diablo.event.impl.WorldLoadEvent;
import cc.diablo.helpers.*;
import cc.diablo.manager.module.ModuleManager;
import cc.diablo.module.impl.movement.Fly;
import cc.diablo.module.impl.player.Scaffold;
import cc.diablo.setting.impl.BooleanSetting;
import cc.diablo.setting.impl.NumberSetting;
import com.google.common.eventbus.Subscribe;
import cc.diablo.event.impl.PacketEvent;
import cc.diablo.event.impl.UpdateEvent;
import cc.diablo.helpers.render.ChatHelper;
import cc.diablo.module.Category;
import cc.diablo.module.Module;
import cc.diablo.setting.impl.ModeSetting;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.Timer;
import org.lwjgl.input.Keyboard;
import store.intent.intentguard.annotation.Native;

import java.io.File;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

public class Disabler extends Module {
    public static ModeSetting mode = new ModeSetting("Disabler Mode", "Verus","Verus","VerusCombat","BlocksMC", "AGC", "AGC v2", "Watchdog", "HypixelSlime", "Matrix", "MatrixNew","Spec", "Ghostly", "GhostlyFull", "Vulcan","Dev");
    public static NumberSetting delay = new NumberSetting("Delay Hypixel",9550,500,15000,50);
    public BooleanSetting HubDisable = new BooleanSetting("Hub Disable", true);
    private final Deque<TimestampedPacket> transactionQueue = new ArrayDeque<>();
    private final Queue<Packet<?>> retardQueue = new ConcurrentLinkedDeque<>();
    private static final int AGC_REACH_AUTOBAN_CHANNEL = 65536;
    private static final short AGC_DISABLE_AUTOBAN_ID = 32767;
    public static final Stopwatch joinWatch = new Stopwatch();
    private final Stopwatch hypixelStopwatch = new Stopwatch();
    private final Stopwatch packetStopwatch = new Stopwatch();
    private final Stopwatch spikeStopwatch = new Stopwatch();
    private final Stopwatch blocksWatch= new Stopwatch();
    private final Stopwatch stopwatch = new Stopwatch();

    private final ArrayList<Packet> packets;
    public boolean hypixelShouldStrafe;
    private boolean expectedTeleport;
    private final TimerUtil timer;
    private long lastTransaction;
    public double limit;
    public int timerTicks;

    public Disabler() {
        super("Disabler", "Disabler for the funni acs", Keyboard.KEY_NONE, Category.Exploit);
        this.packets = new ArrayList<>();
        this.timer = new TimerUtil();
        this.addSettings(mode,delay);
    }

    @Subscribe
    public void onWorldChange(WorldLoadEvent e) {
        switch (mode.getMode()) {
            case "Watchdog":
                expectedTeleport = false;
                joinWatch.reset();
                hypixelStopwatch.reset();
                transactionQueue.clear();
                spikeStopwatch.reset();
                break;
            case "VerusCombat":
            case "GhostlyFull":
                if (ModuleManager.getModule(Disabler.class).isToggled()) {
                    new Thread(() -> {
                        try {
                            ModuleManager.getModule(Disabler.class).setToggled(false);
                            ChatHelper.addChat("Disabled " + mode.getMode() + " disabler to allow for server join");
                            Thread.sleep(1000);
                            ModuleManager.getModule(Disabler.class).setToggled(true);
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }).start();
                }
                hypixelShouldStrafe = true;
                this.stopwatch.reset();
        }
    }

    @Override
    public void onEnable(){
        joinWatch.reset();
        expectedTeleport = false;
        packets.clear();
        timer.reset();
        lastTransaction = 0;
        hypixelShouldStrafe = true;
        stopwatch.reset();
        timerTicks = 0;

        if (mode.isMode("BlocksMC")) {
            this.expectedTeleport = false;
            retardQueue.clear();
            this.blocksWatch.reset();
        }
        super.onEnable();
    }

    @Override
    public void onDisable(){
        Timer.timerSpeed = 1f;
        timerTicks = 0;
        try {
            this.packets.forEach(PacketHelper::sendPacketNoEvent);
            this.packets.clear();
            /*
            this.transactions.clear();
            this.keepAlives.clear();

             */
        } catch (Exception e){
            e.printStackTrace();
        }
        super.onDisable();
    }

    @Subscribe
    public void onUpdate(UpdateEvent e){
        this.setDisplayName(this.getName() + "\2477 " + this.mode.getMode());
        switch (mode.getMode()) {
            case "Spec":
                if (e.isPre()) {
                    PacketHelper.sendPacketNoEvent(new C18PacketSpectate((mc.thePlayer.getUniqueID())));
                }
                break;
            case "BlocksMC":
                /*
                if (timer.reach(490L)) {
                    timer.reset();

                    if (!packets.isEmpty()) {
                        for(Packet p : packets) {
                            PacketHelper.sendPacketNoEvent(p);
                        }
                    }
                }

                 */
                break;
            case "Watchdog":

                if(mc.thePlayer.ticksExisted == 80 && !expectedTeleport) {
                    mc.thePlayer.ticksExisted = 0;
                    expectedTeleport = true;
                }

                if(!ModuleManager.getModule(Fly.class).isToggled() && !ModuleManager.getModule(Scaffold.class).isToggled()) {
                    if (e.isPost()) {
                        if (Minecraft.theWorld == null) {
                            transactionQueue.clear();
                        }

                        if (packetStopwatch.hasReached(mc.thePlayer.ticksExisted < 70 ? 1250 : 200)) {
                            while (!transactionQueue.isEmpty())
                                mc.getNetHandler().addToSendQueueNoEvent(transactionQueue.removeLast().packet);
                            packetStopwatch.reset();
                        }
                        /*
                        if (mc.thePlayer.ticksExisted == 40) {
                            e.setX(e.getX() + 1);
                            e.setZ(e.getZ() + 1);
                        }

                         */
                        if (spikeStopwatch.hasReached(10000)) {
                            packetStopwatch.reset();
                            spikeStopwatch.reset();
                        }
                    }
                } else {
                    while (!transactionQueue.isEmpty())
                        mc.getNetHandler().addToSendQueueNoEvent(transactionQueue.removeLast().packet);
                    packetStopwatch.reset();
                }
                break;
        }
    }

    @Subscribe
    public void onPacket(PacketEvent e) {
        switch (mode.getMode()) {
            case "Matrix":
                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packetPlayer = (C03PacketPlayer) e.getPacket();
                    double x = mc.thePlayer.posX, y = mc.thePlayer.posY, z = mc.thePlayer.posZ;
                    float yaw = mc.thePlayer.rotationYaw, pitch = mc.thePlayer.rotationPitch;

                    if (packetPlayer.isMoving()) {
                        x = packetPlayer.getPositionX();
                        y = packetPlayer.getPositionY();
                        z = packetPlayer.getPositionZ();
                    }
                    if (packetPlayer.getRotating()) {
                        yaw = packetPlayer.getYaw();
                        pitch = packetPlayer.getPitch();
                    }
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0, 0, 0));
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0, 0, 0));
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0, 0, 0));
                    e.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));
                    PacketHelper.sendPacketNoEvent(e.getPacket());
                } else if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                }
                break;
            case "Verus":
                double veruspositionraper = 0.911420691337;
                if (e.isOutgoing()) {
                    if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                        final C0FPacketConfirmTransaction confirmtrans = (C0FPacketConfirmTransaction) e.getPacket();
                        if (mc.thePlayer.ticksExisted % 3 == 0) {
                            confirmtrans.uid = -1;
                            //ChatHelper.addChat(String.valueOf(confirmtrans.getUid()));
                        } else {
                            e.cancelled = true;
                        }
                    }
                    if (e.getPacket() instanceof C00PacketKeepAlive) {
                        final C00PacketKeepAlive keepalive = (C00PacketKeepAlive) e.getPacket();
                        keepalive.key = -6;
                    }
                    if (e.getPacket() instanceof C03PacketPlayer) {
                        if (mc.thePlayer.ticksExisted % 60 == 0) {
                            C03PacketPlayer c03 = (C03PacketPlayer) e.getPacket();
                            c03.onGround = false;
                            c03.y = -veruspositionraper;
                        }
                    }
                }
                break;
            case "BlocksMC":
                if (this.packets.size() > 10) {
                    this.packets.clear();
                }

                if (e.getDir() == PacketEvent.DirectionType.Outgoing && e.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.isEntityAlive()) {
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                    if (this.timer.sleep(650)) {
                        this.timer.reset();
                    }
                }

                if (timer.sleep(650) && !this.packets.isEmpty()) {
                    Packet packet = this.packets.get(0);
                    mc.getNetHandler().getNetworkManager().sendPacket(packet);
                    this.packets.remove(packet);
                    this.timer.reset();
                }

                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    final int AGC_REACH_AUTOBAN_CHANNEL = 65536;
                    final short AGC_DISABLE_AUTOBAN_ID = 32767;
                    C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction) e.getPacket();
                }

                if (e.getPacket() instanceof C00PacketKeepAlive && e.getDir() == PacketEvent.DirectionType.Outgoing) {
                    PacketHelper.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                }

                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                }

                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) e.getPacket();
                    if (mc.thePlayer.ticksExisted % 5 == 0) PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                    if (mc.thePlayer.ticksExisted % 40 == 0) {
                        this.expectedTeleport = true;
                        c03PacketPlayer.y = -0.02632525;
                        c03PacketPlayer.onGround = false;
                        ChatHelper.addChat("SEX");
                    }
                }

                if (e.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                    S08PacketPlayerPosLook p = (S08PacketPlayerPosLook) e.getPacket();
                    this.expectedTeleport = false;
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
                }
                break;
            case "Watchdog":
                if(e.isOutgoing()) {
                    if (!joinWatch.hasReached((long) delay.getVal())) {
                        ScaledResolution sr = new ScaledResolution(mc);
                        e.setCancelled(true);
                        PacketHelper.sendPacketNoEventDelayed(e.getPacket(), (long) delay.getVal());
                    }
                } else if(e.isIncoming()){
                    if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                        S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) e.getPacket();
                        PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), false));
                        mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
                        mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                        mc.thePlayer.prevPosX = mc.thePlayer.posX;
                        mc.thePlayer.prevPosY = mc.thePlayer.posY;
                        mc.thePlayer.prevPosZ = mc.thePlayer.posZ;
                        mc.displayGuiScreen(null);
                        e.setCancelled(true);
                    }
                }

                /*
                if (!ModuleManager.getModule(Fly.class).isToggled() && !ModuleManager.getModule(Scaffold.class).isToggled()) {
                    if (e.isOutgoing()) {



                        if (e.getPacket() instanceof C03PacketPlayer) {
                            if (lastTransaction > 0) {
                                e.setCancelled(true);
                                lastTransaction--;
                                return;
                            }
                            if (e.getPacket() instanceof C03PacketPlayer) {
                                final C03PacketPlayer packetPlayer = (C03PacketPlayer) e.getPacket();
                                if (!packetPlayer.isMoving() && !packetPlayer.getRotating())
                                    e.setCancelled(true);
                                else
                                    transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                                e.setCancelled(true);
                            }
                            if (e.getPacket() instanceof C00PacketKeepAlive) {
                                transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                                e.setCancelled(true);
                            }

                            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                                C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction) e.getPacket();
                                transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                                lastTransaction++;
                                PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                                e.setCancelled(true);
                            }
                        }

                        if (e.getPacket() instanceof C0CPacketInput) {
                            e.setCancelled(true);
                            PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 2650);
                        }

                        if (e.getPacket() instanceof C03PacketPlayer) {
                            if (mc.thePlayer.ticksExisted % 3 == 0) {
                                e.setCancelled(true);
                            }
                        }


                        if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                            e.setCancelled(true);
                            S08PacketPlayerPosLook p = (S08PacketPlayerPosLook) e.getPacket();
                            PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), mc.thePlayer.onGround));
                        }

                    } else if (e.isIncoming()) {
                        if (e.getPacket() instanceof S07PacketRespawn) {
                            transactionQueue.clear();
                            spikeStopwatch.reset();
                        }



                    }
                } else {
                    hypixelStopwatch.reset();
                    transactionQueue.clear();
                    spikeStopwatch.reset();
                }

                 */
                break;
            case "HypixelSlime":
                if (e.getPacket() instanceof S08PacketPlayerPosLook && !ModuleManager.getModule(Scaffold.class).isToggled()) {
                    if (mc.thePlayer.ticksExisted % 5 == 0) {
                        S08PacketPlayerPosLook p = (S08PacketPlayerPosLook) e.getPacket();
                        e.setCancelled(true);
                        PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), mc.thePlayer.onGround));
                    }
                }

                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer p = (C03PacketPlayer) e.getPacket();
                    p.onGround = true;
                }

                if (mc.thePlayer.ticksExisted % 10 == 0 && mc.thePlayer.onGround && mc.thePlayer.isMoving()) {
                    HypixelHelper.slimeDisable();
                }
                break;
            case "AGC":
                if (this.packets.size() > 10) {
                    this.packets.clear();
                }

                if (e.getDir() == PacketEvent.DirectionType.Outgoing && e.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.isEntityAlive()) {
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                    if (this.timer.sleep(650)) {
                        this.timer.reset();
                    }
                }

                if (timer.sleep(650) && !this.packets.isEmpty()) {
                    Packet packet = this.packets.get(0);
                    mc.getNetHandler().getNetworkManager().sendPacket(packet);
                    this.packets.remove(packet);
                    this.timer.reset();
                }

                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    final int AGC_REACH_AUTOBAN_CHANNEL = 65536;
                    final short AGC_DISABLE_AUTOBAN_ID = 32767;
                    C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction) e.getPacket();
                }

                if (e.getPacket() instanceof C00PacketKeepAlive && e.getDir() == PacketEvent.DirectionType.Outgoing) {
                    PacketHelper.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                }
                break;
            case "VerusCombat":
                    if (e.isOutgoing()) {
                        if(mc.thePlayer.ticksExisted % 60 == 0){
                            for (Packet p: packets) {
                                //PacketHelper.sendPacketNoEvent(p);
                            }
                            packets.clear();
                        }
                        if (e.getPacket() instanceof C00PacketKeepAlive) {
                            C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) e.getPacket();
                            packetKeepAlive.key = -1;
                            packets.add(e.getPacket());
                            e.setCancelled(true);
                        }

                        if (e.getPacket() instanceof C0BPacketEntityAction) {
                            e.setCancelled(true);
                        }

                        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                            C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) e.getPacket();
                            packetConfirmTransaction.windowId = -6;
                            packets.add(e.getPacket());
                            e.setCancelled(true);
                        }

                        if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                            S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook) e.getPacket();
                            PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                            e.setCancelled(true);
                        }

                    }
                break;
            case "Ghostly":
                if(!mc.gameSettings.keyBindUseItem.pressed) {
                    if (e.isOutgoing()) {
                        if (e.getPacket() instanceof C03PacketPlayer) {
                            PlayerCapabilities pc = new PlayerCapabilities();
                            pc.isCreativeMode = true;
                            pc.isFlying = true;
                            PacketHelper.sendPacketNoEvent(new C13PacketPlayerAbilities(pc));
                            PacketHelper.sendPacket(new C18PacketSpectate(mc.thePlayer.getGameProfile().getId()));
                            PacketHelper.sendPacket(new C0CPacketInput(1.05F, 1.05F, true, false));
                        }
                        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                            e.setCancelled(true);
                        }
                        if (e.getPacket() instanceof C00PacketKeepAlive) {
                            e.setCancelled(true);
                        }

                    }
                }
                break;
            case "Vulcan":
                if(e.getPacket() instanceof C0FPacketConfirmTransaction){
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 9000);
                }
                break;
            case "GhostlyFull":
                if(Minecraft.theWorld != null) {
                        while (this.packets.size() > 25) {
                            for (Packet p : packets) {
                                PacketHelper.sendPacketNoEvent(p);
                            }
                            packets.clear();
                        }

                    if (e.getPacket() instanceof C00PacketKeepAlive) {
                        C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) e.getPacket();
                        packetKeepAlive.key -= 24;
                        packets.add(e.getPacket());
                        e.setCancelled(true);
                    }

                    if (e.getPacket() instanceof C0BPacketEntityAction) {
                        e.setCancelled(true);
                    }

                    if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) e.getPacket();
                        packets.add(e.getPacket());
                        PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                        e.setCancelled(true);
                    }

                    if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                        S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook) e.getPacket();
                        PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                        e.setCancelled(true);
                    }
                } else {
                    packets.clear();
                }
                break;
            case "MatrixNew":
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 5000l);
                }

                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 5000l);
                }
                break;
            case "NullDisabler":
                if(e.isOutgoing()){
                    e.setPacket(null);
                }
                break;
        }

    }

    boolean shouldNotRun() {
        if (this.HubDisable.isChecked()) {
            if (mc.thePlayer == null) return true;
            if (mc.thePlayer.inventory == null) return true;
            if (mc.thePlayer.inventory.hasItem(Items.compass)) {
                return true;
            }
        }
        return mc.thePlayer == null || mc.thePlayer.ticksExisted <= 5;
    }

    private class TimestampedPacket {
        private final Packet<?> packet;
        private final long timestamp;

        public TimestampedPacket(final Packet<?> packet, final long timestamp) {
            this.packet = packet;
            this.timestamp = timestamp;
        }
    }

}
